%clc, close all
%clear all

startup;
p = Pushbullet(pushbullet_api);

%addpath('C:\dev\casadi-windows-matlabR2016a-v3.5.2');
addpath('\\home.org.aalto.fi\sliczno1\data\Documents\casadi-windows-matlabR2016a-v3.5.1');
import casadi.*

DATA_set                = {'LUKE_T40_P200','LUKE_T50_P200','LUKE_T40_P300','LUKE_T50_P300'};
Parameters_table        = readtable('Parameters.csv') ;        % Table with prameters

DATA_K_OUT=nan(5,4);                                           % Store Parameters obatined from all fits (par num x num exper)

%% Set time of the simulation
PreparationTime         = 0;
ExtractionTime          = 150;
simulationTime          = PreparationTime + ExtractionTime;

timeStep                = 1/2;                                                 % Minutes

timeStep_in_sec         = timeStep * 60;                                       % Seconds
Time_in_sec             = (timeStep:timeStep:simulationTime)*60;               % Seconds
Time                    = [0 Time_in_sec/60];                                  % Minutes

N_Time                  = length(Time_in_sec);

%%
SamplingTime            = 5;                                                   % Minutes

SAMPLE   = [PreparationTime:SamplingTime:simulationTime];

N_Sample = [];
for i = 1:numel(SAMPLE)
    N_Sample = [N_Sample ; find(Time == SAMPLE(i))];
end
if numel(N_Sample) ~= numel(SAMPLE)
    keyboard
end

%% Specify parameters to estimate
nstages                 = 150;

before  = 0.1;          nstagesbefore   = 1:floor(before*nstages);
bed     = 0.2;          nstagesbed      = nstagesbefore(end)+1 : nstagesbefore(end) + floor(bed*nstages);
nstagesafter                            = nstagesbed(end)+1:nstages;

bed_mask                = nan(nstages,1);
bed_mask(nstagesbefore) = 0;
bed_mask(nstagesbed)    = 1;
bed_mask(nstagesafter)  = 0;

which_k                 = [8, 44, 45, 47];

%% Set parameters
mSOL_s                   = 78;                                          % g of product in biomass
mSOL_f                   = 78-mSOL_s;                                   % g of biomass in fluid

%C0fluid                 = 1;                                           % Extractor initial concentration of extract - Fluid phase kg / m^3

V                       = 0.008;                                        % deafault = 0.01
r                       = 0.075;                                        % Radius of the extractor  [m3]
L                       = V / pi / r^2;                                 % Total length of the extractor [m]
L_nstages               = linspace(0,L,nstages);
A                       = pi*r^2;                                       % Extractor cross-section
epsi                    = 0.5;                                          % Fullness [-]

%--------------------------------------------------------------------
V_slice                 = (L/nstages) * pi * r^2;
V_before                = V_slice * numel(nstagesbefore);
V_after                 = V_slice * numel(nstagesafter);
V_bed                   = V_slice * numel(nstagesbed);                  % Volume of the fixed bed [m3]

V_before_solid          = repmat(V_before * 0 / numel(nstagesbefore), numel(nstagesbefore),1);
V_bed_solid             = repmat(V_bed * epsi / numel(nstagesbed),    numel(nstagesbed),1);
V_after_solid           = repmat(V_after * 0  / numel(nstagesbed),    numel(nstagesafter),1);

V_solid                 = [V_before_solid; V_bed_solid; V_after_solid];

V_before_fluid          = repmat(V_before * 1       / numel(nstagesbefore), numel(nstagesbefore),1);
V_bed_fluid             = repmat(V_bed * (1 - epsi) / numel(nstagesbed),    numel(nstagesbed),1);
V_after_fluid           = repmat(V_after * 1        / numel(nstagesafter),  numel(nstagesafter),1);

V_fluid                 = [V_before_fluid; V_bed_fluid; V_after_fluid];

%--------------------------------------------------------------------
dp                      = 0.00010;                                      % Diameter of the particle [m] - Vargas
rho_s                   = 1250.0;                                       % Densisty of the solid phase [kg / m^3] - FC
km                      = 0.29;                                         % Partition coefficient (?)

mi                      = 1/2;                                          % Geometric shape coefficient (?)

C0solid                 = mSOL_s * 1e-3 / ( V_bed * epsi)  ;            % Solid phase kg / m^3

C0fluid                 = mSOL_f * 1e-3 / (V_before + V_bed * (1-epsi) + V_after);

m0fluid(nstagesbefore) = C0fluid * V_before / numel(nstagesbefore);
m0fluid(nstagesbed)    = C0fluid * (V_bed * (1 - epsi)) / numel(nstagesbed);
m0fluid(nstagesafter)  = C0fluid * V_after / numel(nstagesafter);

%%
Nx                      = 4*nstages+1;
Nu                      = 3 + numel( Parameters_table{:,3} );
Nk                      = numel(which_k)+1;

%% symbolic variables
% Create symbolic variables
x                       = MX.sym('x', Nx);
u                       = MX.sym('u', Nu);

%% Set Integrator
f                       = @(x, u) modelSFE_uniform_U(x, u, bed_mask);

% Integrator
F                       = buildIntegrator(f, [Nx,Nu] , timeStep_in_sec);

V_Flow     = 0.41;

parfor ii=1:numel(DATA_set)

    DATA = DATA_set{ii};

    %%

    LabResults = xlsread([DATA,'.xlsx']);

    T0homog   = LabResults(1,1)+273.15;
    feedPress = LabResults(1,2);

    data_org  = LabResults(:,5)';
    data      = diff(data_org);

    %%
    rho        = rhoPB_Comp(T0homog, feedPress, Compressibility(T0homog,feedPress,table2cell(Parameters_table(:,3))), table2cell(Parameters_table(:,3)));

    % Set operating conditions
    feedTemp   = T0homog   * ones(1,length(Time_in_sec)) + 0 ;  % Kelvin
    %feedTemp(round(numel(Time)/10):round(numel(Time)/4))   = feedTemp(1) - 20;

    feedPress  = feedPress * ones(1,length(Time_in_sec)) + 0 ;  % Bars
    %feedPress(round(numel(Time)/3):round(2*numel(Time)/3))   = feedPress(1) - 10;

    feedFlow   = V_Flow * rho * 1e-3 / 60 * ones(1,length(Time_in_sec));  % l/min -> km3/s
    %feedFlow(1:N_Sample(1)) = linspace(feedFlow(1)/10,feedFlow(1),numel(feedFlow(1:N_Sample(1))));
    %feedFlow(1:N_Sample(1)) = 0;

    uu         = [feedTemp', feedPress', feedFlow'];

    % Initial conditions
    x0         = [
                C0fluid * ones(nstages,1);
                C0solid * bed_mask;
                T0homog*ones(nstages,1);
                rho*ones(nstages,1);
                0;
                ];

    Parameters          = Parameters_table{:,3};
    Parameters(1:9)     = [nstages, C0solid, r, epsi, dp, L, rho_s, km, mi];

    %% load parameters and set number of stages

    % Create the solver
    OPT_solver                  = casadi.Opti();

    nlp_opts                    = struct;
    nlp_opts.ipopt.max_iter     = 100;
    %nlp_opts.ipopt.max_cpu_time = 3600;
    ocp_opts                    = {'nlp_opts', nlp_opts};
    OPT_solver.solver(             'ipopt'   , nlp_opts)

    % Descision variables
    k                       = OPT_solver.variable(Nk);
    k_lu                    = [ [0;0.01;0.01;0;0] , [2;10;1;10;100] ];
    % Constraints
    for nk=1:Nk
        OPT_solver.subject_to( k_lu(nk,1) <= k(nk,:) <= k_lu(nk,2) );
    end

    %% Assign new values of parameters to the Parameters vector
    %                       nstages, C0solid, V, epsi, dp, L, rho_s, km, mi
    Parameters_sym       = MX(Parameters);           % Vector of paraneters in the form casadi vector
    % Decide which parameters are decision variabales

    Parameters_sym(which_k) = k(1:4);
    sigma = k(5);

    % Store symbolic results of the simulation
    X = MX(Nx,N_Time+1);
    X(:,1) = x0;

    % Symbolic integration
    for j=1:N_Time
        X(:,j+1)=F(X(:,j), [uu(j,:)'; Parameters_sym] );
    end

    %% Find the measurment from the simulation
    Yield_estimate      = X(Nx,N_Sample);
    Yield_estimate_diff = diff(Yield_estimate);

    %% Create the cost function
    J       = (data-Yield_estimate_diff ) * diag(1:1:1) * (data-Yield_estimate_diff )';
    %J = sum(abs(data-Yield_estimate))/numel(data);

    % MLE: Normal
    J_L     = -numel(data)/2 * log(2*pi) - numel(data) * log(sigma^2) - J/(2*sigma^2);
    %J_L     = 1./sqrt( ( 2*3.14.*sigma.^2).^(numel(data)) ) .* exp( -J./(2.*sigma.^2) )

    J_L     = -J_L;
    %fJ  = Function('fJ', {k}, {J_L} );

    %%
    %k0= [km  Di    Dx  C_sat, sigma];
    k0 = [0.1, 0.1, 1,  4,     0.01];

    %% Set opt and inital guess
    OPT_solver.minimize(J);

    OPT_solver.set_initial(k, k0);

    tic

    %% Solve the opt
    try
        sol = OPT_solver.solve();
        KOUT = full(sol.value(k))
    catch
        KOUT = OPT_solver.debug.value(k)
    end

    toc

    p.pushNote('ujBXuXMcOOasjC3NU4Fk5c','Matlab',[DATA,'This work is finished', mat2str([round(KOUT,3)])]);

    DATA_K_OUT(:,ii) = KOUT;

end

%%

for ii=1:4

    DATA = DATA_set{ii};

    %%

    LabResults = xlsread([DATA,'.xlsx']);

    T0homog   = LabResults(1,1)+273.15;
    feedPress = LabResults(1,2);

    data_org  = LabResults(:,5)';
    data      = diff(data_org);

    %%
    rho        = rhoPB_Comp(T0homog, feedPress, Compressibility(T0homog,feedPress,table2cell(Parameters_table(:,3))), table2cell(Parameters_table(:,3)));

    % Set operating conditions
    feedTemp   = T0homog   * ones(1,length(Time_in_sec)) + 0 ;  % Kelvin
    %feedTemp(round(numel(Time)/10):round(numel(Time)/4))   = feedTemp(1) - 20;

    feedPress  = feedPress * ones(1,length(Time_in_sec)) + 0 ;  % Bars
    %feedPress(round(numel(Time)/3):round(2*numel(Time)/3))   = feedPress(1) - 10;

    feedFlow   = V_Flow * rho * 1e-3 / 60 * ones(1,length(Time_in_sec));  % l/min -> km3/s
    %feedFlow(1:N_Sample(1)) = 0;% linspace(feedFlow(1)/10,feedFlow(1),numel(feedFlow(1:N_Sample(1))));

    uu         = [feedTemp', feedPress', feedFlow'];

    % Initial conditions
    x0         = [
                C0fluid * ones(nstages,1);
                C0solid * bed_mask;
                T0homog*ones(nstages,1);
                rho*ones(nstages,1);
                0;
                ];

    Parameters          = Parameters_table{:,3};
    Parameters(1:9)     = [nstages, C0solid, r, epsi, dp, L, rho_s, km, mi];


     %% Simulate system
    %Parameters(which_k) = k0(1:4);
    %Parameters_opt = [uu repmat(Parameters,1,N_Time)'];
    %[xx_0] = simulateSystem(F, [], x0, Parameters_opt  );

    %%
    Parameters(which_k) = DATA_K_OUT(1:4,ii);
    Parameters_opt = [uu repmat(Parameters,1,N_Time)'];
    [xx_out] = simulateSystem(F, [], x0, Parameters_opt  );

    %% Plotting

    Plot_Fit

end

%%

RHO         = [840, 785, 910, 870];
NAME        = {'$km[-]$', '$D_i[m^2/s]$', '$D_x[m^2/s]$', '$C_{sat}[kg/m^3]$'};

%% Fit the parameters based as linear function of density

figure(1)

for jj=1:2
    for ii=1:4
        
        [trendLine, SLine]   = polyfit(RHO, DATA_K_OUT(ii,:), jj );
        p_est                = polyval(trendLine, RHO);
        p_y                  = polyval(trendLine, linspace(min(RHO), max(RHO) ) );
        
        subplot(2,2,ii)
        scatter(RHO, DATA_K_OUT(ii,:), 'filled')
        hold on
        plot(linspace(min(RHO), max(RHO) ),p_y,'LineWidth',2);
        hold off
    
        title(['$R^2 = $', mat2str( round(power(corr2(DATA_K_OUT(ii,:), p_est),2),2) ) ])
    
        xlabel('$\rho~[kg/m^3]$')
        ylabel(NAME{ii})
    
    end
    
    set(gcf,'PaperOrientation','landscape'); print(figure(1),['Trend_Lines_order_',mat2str(jj),'_No_Delay.pdf'],'-dpdf','-bestfit'); close all;

end

%%
%{
xdot         = modelSFE_uniform_U(x, u, bed_mask);
[S,p,Sdot]   = Sensitivity(x, xdot, u, [3+8] );
Var_name     = 'k_m';

%%
x0_SA         = [
            C0fluid * ones(nstages,1);
            C0solid * bed_mask;
            T0homog*ones(nstages,1);
            rho * ones(nstages,1);        
            0;
            zeros(length(S)-length(xdot),1);
            ];

%%
Results = Integrator_SS(Time*60, x0_SA, S, p, Sdot, Parameters_opt );
Res = Results(Nx+1:end,:) ;

%%
N_layers = [round(nstages*before),round(1.5*nstages*before),round(2*nstages*before),round(2.5*nstages*before),round(4*nstages*before),nstages];
L_labels = num2cell(L_nstages(N_layers) ./ L);
L_labels = strcat(string(L_labels),' [-]');

NAME = {'c_f','c_s'};

figure(3)
h = tiledlayout(numel(NAME),2);

for i=1:numel(NAME)

    nexttile
    hold on
    plot(Time,Res(N_layers+(i-1)*nstages,:)); 
    xline(PreparationTime,'--k')
    hold off
    pbaspect([2 1 1])
    ylabel(['$\frac{\partial ',NAME{i},'}{\partial ',Var_name,'}$'],'Interpreter','latex')
    xlabel('Time [min]','Interpreter','latex')
    lgd = legend( L_labels', 'location', 'bestoutside', 'Interpreter','latex' , 'box', 'off');
    lgd.FontSize = 10;
    
    nexttile
    imagesc(Time,L_nstages ./ L,Res((i-1)*nstages+1:i*nstages,:)); colormap jet; colorbar
    hold on
    yline(L_nstages(N_layers) ./ L,'--w')
    xline(PreparationTime,'--w')
    hold off
    pbaspect([2 1 1])
    c = colorbar;
    title(['$\frac{\partial ',NAME{i},'}{\partial ',Var_name,'}$'],'Interpreter','latex')
    set(c,'TickLabelInterpreter','latex')
    ylabel('$L [m]$','Interpreter','latex')
    xlabel('Time [min]','Interpreter','latex')
    %axis square

end

set(gcf,'PaperOrientation','landscape'); print(figure(3),['Sensitivity_',Var_name,'_Profiles.pdf'],'-dpdf','-bestfit'); close all

%%
figure(4)

ax = plotyy(Time, Results(Nx,:),Time, Res(Nx,:));
pbaspect(ax(1),[2 1 1])
pbaspect(ax(2),[2 1 1])
ylabel(ax(1), '$y(t)$','Interpreter','latex');
ylabel(ax(2), ['$\frac{\partial y(t)}{\partial ',Var_name,'}$'],'Interpreter','latex');
xlabel('Time [min]','Interpreter','latex')
set(ax,'FontSize',14)
axis tight

set(gcf,'PaperOrientation','landscape'); print(figure(4),['Sensitivity_',Var_name,'_Yield.pdf'],'-dpdf','-bestfit'); close all

%}
